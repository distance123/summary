LPAD函数: 左边对字符串使用指定的字符进行填充
	lpad(string,padded_length,[pad_string])
		string 	准备被填充的字符
		padded_length	填充之后的字符串长度,该函数返回的字符串长度
						如果比原来的长度要段,则会把字符串截取成从左到右的n个字符
		pad_string		填充字符,如果未写,则将string左边黏贴空格
NVL函数	
	NVL(string,replace_with)	如果string为null值,则返回replace_with,不能null则返回string
								都为null则返回null
						string和replace_with类型一致

union all

decode函数
	decode(条件,值1,返回值1,值2,返回值2...,"缺省值 可以省略");
	decode(字段或者字段运算,值1,值2,值3)
		字段或者运算==值1时 返回值2 否则返回值3	值1 值2 值三可以为表达式
sign()函数	根据某个值是0还是正数 负数 返回0 1 -1
	判断2个值的大小 返回小值
		select decode(sign(变量1-变量2),-1,变量1,变量2)
	decode+lpad函数实现主键自增 并在前面补0
递归函数
	
	start with 条件 connect by (nocycle) prior id=parent_id 向下递归
	start with 条件 connect by (nocycle) prior parent_id=id 向上递归
	后面可以加where条件 但是条件实是在递归结束后执行 
	connect_by_root(列名)	查询根节点
	connect_by_isleaf		查询是否叶子节点 0是 1不是
	sys_connect_by_path(name,'符号0000')		查询递归路径
		注意不能使用逗号,如果要使用,需要用replace处理
		使用该函数必创建一个树 否则无用
	nocycle 关键字忽略掉
instr()函数和like关键字的区别
	instr()用法:
		instr(name,'aaa')>0		相当于 name like '%aaa%'
		instr(name,'aaa')=1		相当于 name like 'aaa%'
		instr(name,'aaa')<0		相当于 name not like '%aaa%'
	在数据量很大是 使用instr()函数的查询效率比使用like高很多,oracle中的函数是做过一些优化的
	所以,建议使用函数去执行操作,instr()代替like是常用用法之一
	其他还有
		instr(sourceString,destString,startIndex,apperPosition)		返回查找到的字符串的index
				startIndex	可以为负 表示从右边开始查询,但返回index依然从左边计算
				apperPosition 默认为1 可以指定;
	
	WMSYS.WM.CONCAT 可以用来拼接列,排序是不规则的,							 11g不能用了 似乎 
	listagg(T.ENAME,',')  within group (order by T.EMPNO) CONCAT FROM EMP T	 建议使用这个做列转行 
	wmsys.wm.concat(name)
OVER() 			分析函数
row_number()    分析函数
		
触发器和级联操作的区别
	触发器的可以实现级联操作, 但效率比级联操作低
	触发器的作用在于控制:	操作灵活
		
视图	
	强大之处它能够根据不同用户的需要来对基表中的数据进行整理
	with read only
	本质上是一条sql语句,不占用物理空间,查视图相当于 重新执行sql语句,视图可以从另外一个视图中产生
	当修改视图中的数据时,相当于修改基表中的数据,基表中的数据改动,也会自动反应在视图中,但由于逻辑上
	的原因,有些oracle视图可以修改对应的基表,有些则不能(仅仅是查询).
		
	物化视图(MATERIALIZED VIEW)
		实体化视图,占用存贮空间,含有数据
	视图作用:(提高查询效率,保护数据)
		提供各种数据的表现形式,
		隐藏数据的逻辑复杂性,简化查询语句,
		保护某些敏感列数据,让不同的用户看到不同的列
		执行某些必须使用视图的查询
		
	创建视图:
		create [ or replace ] [ force ] view view_name
		[ (column1,column2,...) ]	as
		select ...
		[ with check option ]
		[ constraint constraint_name ]
		[ with read only ]
	
		force::"强制"创建视图,不考虑基表是否存在,也不考虑是否具有基表的使用权限
		with check option:指定对视图执行dml操作时满足"视图子查询"
			视图子查询:对通过视图进行增删改操作进行"检查",要求增删改数据,必须是select查询所能查询到的数据
				否则不允许并返回错误提示,默认情况下,在增删改之前"不会检查"这些行是否能被select查询检索到
		with read only:视图为只读模式,不能用于更改数据
		
	连接视图的更新准则
		dml操作只能对视图键值保存标进行更新
		只能使用连接视图定义过的列
		"自连接视图"的所有列都是可更新的
		insert操作的视图至少"包含"键值保存表中所设置了约束的列
		
		
		
		
		
		
		
	

http://blog.csdn.net/u013120247/article/details/51542988


mysql
	mysql 自增原理是 等insert语句执行完毕后 再将主键生成
